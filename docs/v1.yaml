openapi: 3.0.0
info:
  title: Aviatick API
  description: API developed by Aviatick's team to handle all of the business logics inside the app.
  version: 1.0.0
servers:
  - url: https://web-app-backend-git-development-aviaticks-projects.vercel.app/api/v1
tags:
  - name: Flights
    description: Flight ticket search
  - name: Payments
    description: Payment operations
  - name: Bookings
    description: Booking operations
components:
  schemas:
    Ticket:
      type: object
      properties:
        id:
          type: integer
          example: 1
        price:
          type: integer
          example: 1750000
        tax:
          type: number
          example: 0.1
        flightId:
          type: number
          example: 2
        airplaneSeatClassId:
          type: number
          example: 3
    Flight:
      type: object
      properties:
        id:
          type: integer
          example: 1
        flightNumber:
          type: string
          example: FL001
        departureTime:
          type: string
          example: 2024-06-03T18:00:00.000Z
        arrivalTime:
          type: string
          example: 2024-06-03T21:00:00.000Z
        departureAirportId:
          type: integer
          example: 2
        arrivalAirportId:
          type: integer
          example: 3
    Airport:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Soekarno-Hatta International Airport
        airportCode:
          type: string
          example: CGK
        cityId:
          type: integer
          example: 2
    City:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jakarta
        cityIata:
          type: string
          example: JKT
        country:
          type: string
          example: Indonesia
    AirplaneSeatClass:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Economy
        totalSeat:
          type: integer
          example: 90
        airplaneId:
          type: integer
          example: 2
    Airplane:
      type: object
      properties:
        id:
          type: integer
          example: 1
        model:
          type: string
          example: Airbus A380
        passengerCapacity:
          type: integer
          example: 150
        baggageCapacity:
          type: integer
          example: 20
        cabinCapacity:
          type: integer
          example: 7
        inFlightCapacity:
          type: string
          example: WiFi, Entertainment, Meal, Extra Legroom, Lounge
        airlineId:
          type: integer
          example: 2
    Airline:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: AirAsia
        airlineIata:
          type: string
          example: AK
        logo_url:
          type: string
          example: https://images.squarespace-cdn.com/content/v1/5a5dbe4632601eb31977f947/1629703651716-J8RVOTD1XO3SDINHP2RG/unnamed+%281%29.png?format=500w
        logo_id:
          type: string
          example: 5a5dbe4632601eb31977f947

paths:
  /tickets:
    get:
      tags:
        - Flights
      summary: Fetch flight tickets data based on the query params given
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 10
          description: Number of data to return
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: Number of iteration of data based on the limit
        - in: query
          name: from
          required: true
          schema:
            type: string
            example: BCN
          description: Departure city IATA
        - in: query
          name: to
          required: true
          schema:
            type: string
            example: RIO
          description: Destination city IATA
        - in: query
          name: departure
          required: true
          schema:
            type: string
            example: 2024-06-03
          description: Departure date in YYYY-MM-DD format
        - in: query
          name: return
          required: false
          schema:
            type: string
            example: 2024-06-04
          description: Return date in YYYY-MM-DD format
        - in: query
          name: passengers
          required: true
          schema:
            type: integer
            example: 4
          description: Number of passengers
        - in: query
          name: seat_class
          required: true
          schema:
            type: string
            example: Economy
          description: Type of seat class (First / Business / Economy)
      responses:
        '200':
          description: Flight tickets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Flight ticket(s) fetched
                  data:
                    type: object
                    properties:
                      tickets:
                        type: object
                        properties:
                          departure:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/Ticket"
                              properties:
                                airplaneSeatClass:
                                  allOf:
                                    - $ref: "#/components/schemas/AirplaneSeatClass"
                                  properties:
                                    airplane:
                                      allOf:
                                        - $ref: "#/components/schemas/Airplane"
                                      properties:
                                        airline:
                                          $ref: "#/components/schemas/Airline"
                                flight:
                                  allOf:
                                    - $ref: "#/components/schemas/Flight"
                                  properties:
                                    arrivalAirport:
                                      allOf:
                                        - $ref: "#/components/schemas/Airport"
                                      properties:
                                        city:
                                          $ref: "#/components/schemas/City"
                                    departureAirport:
                                      allOf:
                                        - $ref: "#/components/schemas/Airport"
                                      properties:
                                        city:
                                          $ref: "#/components/schemas/City"
                          return:
                            type: array
                            items:
                              allOf:
                                - $ref: "#/components/schemas/Ticket"
                              properties:
                                airplaneSeatClass:
                                  allOf:
                                    - $ref: "#/components/schemas/AirplaneSeatClass"
                                  properties:
                                    airplane:
                                      allOf:
                                        - $ref: "#/components/schemas/Airplane"
                                      properties:
                                        airline:
                                          $ref: "#/components/schemas/Airline"
                                flight:
                                  allOf:
                                    - $ref: "#/components/schemas/Flight"
                                  properties:
                                    arrivalAirport:
                                      allOf:
                                        - $ref: "#/components/schemas/Airport"
                                      properties:
                                        city:
                                          $ref: "#/components/schemas/City"
                                    departureAirport:
                                      allOf:
                                        - $ref: "#/components/schemas/Airport"
                                      properties:
                                        city:
                                          $ref: "#/components/schemas/City"
                      pagination:
                        type: object
                        properties:
                          next:
                            type: string
                            example: https://web-app-backend-git-development-aviaticks-projects.vercel.app/api/v1/tickets?limit=10&page=4&from=BCN&to=RIO&departure=2024-06-03&return=2024-06-04&passengers=2&seat_class=Economy
                          prev:
                            type: string
                            example: https://web-app-backend-git-development-aviaticks-projects.vercel.app/api/v1/tickets?limit=10&page=2&from=BCN&to=RIO&departure=2024-06-03&return=2024-06-04&passengers=2&seat_class=Economy
                          total:
                            type: integer
                            example: 50

  /payments/midtrans/token/{bookingId}:
    post:
      tags:
        - Payments
      summary: Create a payment token using Midtrans
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  example: credit_card
      responses:
        '200':
          description: Token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Token retrieved successfully
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: 2304b11f-fd1f-425e-b481-ced5e3f349c6
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid booking ID
                  data:
                    example: ~
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Booking Not Found With Id 100
                  data:
                    example: ~
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Server error during token creation
                  data:
                    example: ~

  /payments/midtrans/confirm:
    post:
      tags:
        - Payments
      summary: Confirm payment using Midtrans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  example: 'BOOKING-1-123456789'
                transaction_id:
                  type: string
                  example: 'TRANS123'
                transaction_status:
                  type: string
                  example: 'capture'
                gross_amount:
                  type: number
                  example: 100000
                payment_type:
                  type: string
                  example: 'credit_card'
      responses:
        '200':
          description: Payment confirmed and booking status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Payment confirmed and booking status updated successfully
                  data:
                    type: object
                    properties:
                      newPaymentId:
                        type: integer
                        example: 1
                      updatedBookingId:
                        type: integer
                        example: 1
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Transaction is not successful. Status: pending"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Server error during payment confirmation
                  data:
                    example: ~

  /payments/payment/{bookingId}:
    post:
      tags:
        - Payments
      summary: Validate payment with credit card 
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  example: credit_card
                cardNumber:
                  type: string
                  example: 4515678901234
                cardHolderName:
                  type: string
                  example: John Doe
                cvv:
                  type: string
                  example: 123
                expiryDate:
                  type: string
                  example: 12/24
      responses:
        '200':
          description: Payment validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Credit card payment validated successfully
                  data:
                    type: object
                    properties:
                      booking:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          bookingCode:
                            type: string
                            example: "C8D3543BB0"
                          status:
                            type: string
                            example: "PAID"
                          expiredPaid:
                            type: string
                            format: date-time
                            example: "2024-05-28T15:34:29.303Z"
                          totalPrice:
                            type: number
                            example: 11550000
                          flightId:
                            type: integer
                            example: 5
                          userId:
                            type: integer
                            example: 1
                      payment:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "credit_card"
                          paidAt:
                            type: string
                            format: date-time
                            example: "2024-05-28T14:35:04.298Z"
                          bookingId:
                            type: integer
                            example: 1
        '400':
          description: Invalid Booking ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid booking ID
                  data:
                    example: ~
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Booking not found
                  data:
                    example: ~
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Server error during payment validation
                  data:
                    example: ~
  
  /bookings/new-booking:
    post:
      summary: Create a new booking
      tags: 
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                flightId:
                  type: integer
                  example: 1
                adult:
                  type: integer
                  example: 2
                child:
                  type: integer
                  example: 0
                baby:
                  type: integer
                  example: 1
                seatClass:
                  type: string
                  example: "Economy"
                passenger:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Mr."
                      fullName:
                        type: string
                        example: "John Doe"
                      familyName:
                        type: string
                        example: "Doe"
                      birthDate:
                        type: string
                        format: date-time
                        example: "1980-01-01T00:00:00.000Z"
                      nationality:
                        type: string
                        example: "USA"
                      identityType:
                        type: string
                        example: "Passport"
                      issuingCountry:
                        type: string
                        example: "USA"
                      identityNumber:
                        type: string
                        example: "123456789"
                      expiredDate:
                        type: string
                        format: date-time
                        example: "2025-01-01T00:00:00.000Z"
                      ageGroup:
                        type: string
                        example: "ADULT"
            examples:
              createBooking:
                value:
                  userId: 1
                  flightId: 1
                  adult: 2
                  child: 0
                  baby: 1
                  seatClass: "Economy"
                  passenger:
                    - title: "Mr."
                      fullName: "John Doe"
                      familyName: "Doe"
                      birthDate: "1980-01-01T00:00:00.000Z"
                      nationality: "USA"
                      identityType: "Passport"
                      issuingCountry: "USA"
                      identityNumber: "123456789"
                      expiredDate: "2025-01-01T00:00:00.000Z"
                      ageGroup: "Adult"
                    - title: "Mrs."
                      fullName: "Jane Doe"
                      familyName: "Doe"
                      birthDate: "1985-02-01T00:00:00.000Z"
                      nationality: "USA"
                      identityType: "Passport"
                      issuingCountry: "USA"
                      identityNumber: "987654321"
                      expiredDate: "2025-01-01T00:00:00.000Z"
                      ageGroup: "Adult"
                    - title: "Baby"
                      fullName: "Baby Doe"
                      familyName: "Doe"
                      birthDate: "2024-01-01T00:00:00.000Z"
                      nationality: "USA"
                      identityType: "Birth Certificate"
                      issuingCountry: "USA"
                      identityNumber: "111222333"
                      expiredDate: "2025-01-01T00:00:00.000Z"
                      ageGroup: "Baby"
      responses:
        200:
          description: Successfully created booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success creating new Booking'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      flight_id:
                        type: integer
                        example: 1
                      booking_code:
                        type: string
                        example: "1E63B67630"
                      seat_class:
                        type: integer
                        example: 1
                      total_passengers:
                        type: integer
                        example: 3
                      total_price:
                        type: number
                        example: 6600000
                      bookingTax:
                        type: number
                        example: 600000
                      status:
                        type: string
                        example: "UNPAID"
                      paid_before:
                        type: string
                        format: date-time
                        example: "2024-05-30T16:38:51.927Z"
                      created_at:
                        type: string
                        format: date-time
                        example: "2024-06-01T12:30:00.000Z"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Can't find user with id 1"
                  data:
                    type: object
                    nullable: true
                    example: null

  /bookings/booking-history:
    get:
      summary: Get all bookings for a user with filter
      tags:
        - Bookings
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          required: false
          description: ID of the user
        - in: query
          name: search
          schema:
            type: string
          description: Kode booking yang dicari
          example: 6D38CA7BC0
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Tanggal dibuatnya booking
          example: 2024-06-03
      responses:
        200:
          description: Successfully retrieved booking history
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success getting booking history'
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        date:
                          type: string
                          format: date-time
                          example: "2024-06-01T08:00:00.000Z"
                        status:
                          type: string
                          example: "PAID"
                        booking_code:
                          type: string
                          example: "1E63B67630"
                        paid_before:
                          type: string
                          format: date-time
                          example: "2024-05-30T16:38:51.927Z"
                        price:
                          type: number
                          example: 6600000
                        flight_detail:
                          type: object
                          properties:
                            departure_city:
                              type: string
                              example: "New York"
                            arrival_city:
                              type: string
                              example: "Los Angeles"
                            departure_time:
                              type: string
                              format: date-time
                              example: "2024-06-01T08:00:00.000Z"
                            arrival_time:
                              type: string
                              format: date-time
                              example: "2024-06-01T12:00:00.000Z"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid date format"
                  data:
                    type: object
                    nullable: true
                    example: null

  /bookings/booking-history/{bookingId}:
    get:
      summary: Get booking details
      tags:
        - Bookings
      parameters:
        - in: path
          name: bookingId
          schema:
            type: integer
          required: true
          description: ID of the booking
      responses:
        200:
          description: Successfully retrieved booking detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success getting booking detail'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      booking_code:
                        type: string
                        example: "1E63B67630"
                      status:
                        type: string
                        example: "PAID"
                      paid_before:
                        type: string
                        format: date-time
                        example: "2024-05-30T16:38:51.927Z"
                      flight_detail:
                        type: object
                        properties:
                          departure_city:
                            type: string
                            example: "New York"
                          arrival_city:
                            type: string
                            example: "Los Angeles"
                          departure_time:
                            type: string
                            format: date-time
                            example: "2024-06-01T08:00:00.000Z"
                          arrival_time:
                            type: string
                            format: date-time
                            example: "2024-06-01T12:00:00.000Z"
                      passengers:
                        type: array
                        properties:
                          title:
                            type: string
                            example: "Mr"
                          fullname:
                            type: string
                            example: "John Doe"
                          ktp:
                            type: string
                            example: "1234567890"
                        example:
                          - title: "Mr"
                            fullname: "John Doe"
                            ktp: "1234567890"
                          - title: "Mrs"
                            fullname: "Jane Doe"
                            ktp: "0987654321"
                          - title: "Baby"
                            fullname: "Baby Doe"
                            ktp: "5432109876"
                      price_detail:
                        type: object
                        properties:
                          total_price:
                            type: number
                            example: 6600000
                          tax:
                            type: number
                            example: 600000
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Can't find user with id 2"
                  data:
                    type: object
                    nullable: true
                    example: null
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Booking with id 3 not found"
                  data:
                    type: object
                    nullable: true
                    example: null